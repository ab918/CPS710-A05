import java.util.ArrayDeque;
import java.util.ArrayList;

/* Generated By:JavaCC: Do not edit this line. HLEval.java Version 7.0.9 */
public class HLEval implements HLVisitor{
  public Object defaultVisit(SimpleNode node, Object data) throws Exception{
    node.childrenAccept(this, data);
    return data;
  }
  public Object visit(SimpleNode node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTbody node, Object data) throws Exception{
    HLSymbolTab symbolTab = new HLSymbolTab();
    // System.out.println("BODY "+symbolTab.stackHashtable);
    // System.out.println("BODY "+node.jjtGetChild(1));
    // System.out.println("BODY "+node.jjtGetChild(2));
    return defaultVisit(node, data);
  }
  public Object visit(ASTclause node, Object data) throws Exception{
    // for(int i = 0; i < node.jjtGetNumChildren(); ++i) {
    //   System.out.println(node.jjtGetChild(i));
    // }
    // System.out.println("RETURN:==>"+node.jjtGetChild(2).jjtGetChild(0).jjtGetChild(0));
    // System.out.println("RETURN:==>"+node.jjtGetChild(2).jjtGetChild(0).jjtGetChild(1).jjtGetChild(0));
    return defaultVisit(node, data);
  }
  public Object visit(ASTANY node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTINT node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTSTR node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTLST node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTsimple_decl node, Object data) throws Exception{
    // System.out.println("simple declare");
    return defaultVisit(node, data);
  }
  public Object visit(ASTfn_decl node, Object data) throws Exception{
    // System.out.println("from function declare "+node.jjtGetChild(0));
    // System.out.println("from function declare "+node.jjtGetChild(1));
    // System.out.println("from function declare "+node.jjtGetChild(2));
    // System.out.println("from function declare "+node.jjtGetChild(3));

    node.jjtGetChild(1).jjtAccept(this, node.jjtGetChild(2));
    node.jjtGetChild(1).jjtAccept(this, node.jjtGetChild(3));
    return null;
  }
  public Object visit(ASTparam_decls node, Object data) throws Exception{
    // System.out.println("param declares "+node.jjtGetChild(0));
    // System.out.println("DATA RECIEVED param_decls "+data);
    return defaultVisit(node, data);
  }
  public Object visit(ASTparam_decl node, Object data) throws Exception{
    // System.out.println("param declare "+node.jjtGetChild(0));
    // System.out.println("param declare "+node.jjtGetChild(1));
    // System.out.println("DATA RECIEVED param "+data);
    return defaultVisit(node, data);
  }
  public Object visit(ASTif_stat node, Object data) throws Exception{
    Boolean res = ((Boolean)node.jjtGetChild(0).jjtAccept(this,null));
    // System.out.println("res is " + res);
    if(res == true) {
      // System.out.println("RES IS TRUE");
      // System.out.println("EXECUTIN: "+node.jjtGetChild(1));
      return node.jjtGetChild(1).jjtAccept(this, null);
    }
    else {
      if(node.jjtGetChild(2).toString().equals("clause") == true && res == false) {
        // System.out.println(node.jjtGetChild(2).jjtGetChild(0).jjtGetChild(0));
        return node.jjtGetChild(2).jjtGetChild(0).jjtGetChild(0).jjtAccept(this, null);
      }
      else if(node.jjtGetChild(2).toString().equals("if_stat") == true) {
        return node.jjtGetChild(2).jjtAccept(this, null);
      }
      else {
        return null;
      }
    }
  }
  public Object visit(ASTNULL node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTfor_stat node, Object data) throws Exception{
    HLSymbolTab symbolTab = new HLSymbolTab();
    System.out.println("for stuf: "+node.jjtGetChild(0));
    System.out.println(node.jjtGetChild(1).jjtAccept(this,null) instanceof ArrayList);
    System.out.println("for stuf: "+node.jjtGetChild(2));
    System.out.println(symbolTab.nameHashtable);
    System.out.println(symbolTab.stackHashtable);
    String sT = node.jjtGetChild(1).jjtAccept(this,null).toString();
    if(node.jjtGetChild(1).jjtAccept(this,null) instanceof ArrayList) {
      ArrayList list = (ArrayList)node.jjtGetChild(1).jjtAccept(this, null);
      System.out.println("LOOPING FOR LOOP");
      ASTidentifier id = (ASTidentifier) node.jjtGetChild(0);
      for(int i = 0; i < list.size(); ++i) {
        // System.out.println("adding "+list.get(i)+" into "+symbolTab.getName((Integer)id.jjtGetValue()));
        ArrayDeque stack = symbolTab.getObject(symbolTab.getName((Integer)id.jjtGetValue()));
        stack.addLast(String.valueOf(list.get(i)));
        // System.out.println(stack);
        node.jjtGetChild(2).jjtAccept(this,null);
        stack.removeFirst();
      }
    }
    else {
      System.out.println("LOOPING FOR STRING");
      String s = node.jjtGetChild(1).jjtAccept(this,null).toString();
      // System.out.println("PRINTING S: "+s);
      ASTidentifier id = (ASTidentifier) node.jjtGetChild(0);
      for (int i = 0; i < s.length(); i++) {
        // System.out.println("adding "+s.charAt(i)+" into "+symbolTab.getName((Integer)id.jjtGetValue()));
        ArrayDeque stack = symbolTab.getObject(symbolTab.getName((Integer)id.jjtGetValue()));
        stack.addLast(String.valueOf(s.charAt(i)));
        // System.out.println(stack);
        node.jjtGetChild(2).jjtAccept(this,null);
        stack.removeFirst();
      }
    }
    return defaultVisit(node, data);
  }
  public Object visit(ASTwhile_stat node, Object data) throws Exception{
    // System.out.println("from while: "+node.jjtGetChild(0));
    // System.out.println("from while: "+node.jjtGetChild(1));
    Boolean res = ((Boolean)node.jjtGetChild(0).jjtAccept(this,null));
    // System.out.println(res);
    while(res == true) {
      node.jjtGetChild(1).jjtAccept(this, null);
      // System.out.println("res is "+res);
      res = ((Boolean)node.jjtGetChild(0).jjtAccept(this,null));
    }
    
    return null;
  }
  public Object visit(ASTassignment node, Object data) throws Exception{
    System.out.println("ASSIGNMENT: "+node.jjtGetChild(0) +" "+node.jjtGetChild(1).jjtAccept(this, null));
    System.out.println(node.jjtGetChild(1).jjtAccept(this, null) instanceof ASTlist);
    node.jjtGetChild(0).jjtAccept(this,node.jjtGetChild(1).jjtAccept(this, null));
    return null;

  }
  public Object visit(ASTfn_call node, Object data) throws Exception{
    // System.out.println("FUNCTION CALL");
    node.jjtGetChild(1).jjtAccept(this, null);
    
    // System.out.println("CALLING FUNCTION: "+node.jjtGetChild(0));
    node.jjtGetChild(0).jjtAccept(this,"fn_call");
    // HLSymbolTab symbolTab = new HLSymbolTab();
    // symbolTab.removeLocal();
    
    return null;
  }
  public Object visit(ASTparameters node, Object data) throws Exception{
    // System.out.print("PARAMETERS ARE ");
    // System.out.println(node.jjtGetChild(1).jjtAccept(this,null));
    HLSymbolTab symbolTab = new HLSymbolTab();
    // System.out.println("FOR: "+symbolTab.activation.getFirst());
    // ArrayDeque stack = symbolTab.getObject(symbolTab.activation.getFirst());
    // stack.addFirst(node.jjtGetChild(0).jjtAccept(this,null));
    // System.out.println(stack);
    // System.out.println("DATA RECIEVED "+node.jjtGetParent());
    // System.out.println(symbolTab.activation);
    // System.out.println("parameters are coming from "+node.jjtGetParent().jjtGetParent().jjtGetParent());
    // for(int j = 0; j < node.jjtGetNumChildren(); ++j) {
    //   System.out.println("PARAMETERS ARE: "+ node.jjtGetChild(0));
    // }
    int i = 0;
    for(String item: symbolTab.activation) {
      // System.out.println("ITEM: "+item);
      ArrayDeque stack = symbolTab.getObject(item);
      stack.addFirst(node.jjtGetChild(i).jjtAccept(this,null));
      i++;
    }
    return defaultVisit(node, data);
  }
  public Object visit(ASTprint_stat node, Object data) throws Exception{
    // System.out.println("comeing from: "+node.jjtGetParent() + " and going to "+node.jjtGetChild(0));
    String str = String.valueOf(node.jjtGetChild(0).jjtAccept(this,null));
    if(str.equals("null") != true) {
      System.out.print(str);
    }
    return defaultVisit(node, data);
  }
  public Object visit(ASTprintln_stat node, Object data) throws Exception{
    String str = node.jjtGetChild(0).jjtAccept(this,null) + "\n";
    System.out.print(str);
    return defaultVisit(node, data);
  }
  public Object visit(ASTreturn_stat node, Object data) throws Exception{
    // HLSymbolTab symbolTab = new HLSymbolTab();
    System.out.println("RETURN: "+HLSymbolTab.stackHashtable);
    HLSymbolTab symbolTab = new HLSymbolTab();
    System.out.println("The activation stack now looks like this: "+symbolTab.activation);
    System.out.println("before remove: "+HLSymbolTab.stackHashtable);
    symbolTab.removeLocal();
    System.out.println("after remove: "+HLSymbolTab.stackHashtable);
    data = node.jjtGetChild(0).jjtAccept(this,null);
    if(data instanceof Integer) {
      HLInteger number = new HLInteger((Integer)data);
      return number;
    }
    return data;
  }
  public Object visit(ASTor node, Object data) throws Exception{
    int x = 0;
    for(int i = 0; i < node.jjtGetNumChildren(); ++i) {
      // System.out.println("and : "+node.jjtGetChild(i));
      Boolean res = (Boolean)node.jjtGetChild(i).jjtAccept(this, null);
      if(res == true) {
        x = x + 1;
      }
      else {
        x = x + 0;
      }
    }
    // System.out.println("x is "+x);
    if (x > 0) {
      return true;
    }
    else {
      return false;
    }
  }
  public Object visit(ASTand node, Object data) throws Exception{
    int x = 1;
    for(int i = 0; i < node.jjtGetNumChildren(); ++i) {
      // System.out.println("and : "+node.jjtGetChild(i));
      Boolean res = (Boolean)node.jjtGetChild(i).jjtAccept(this, null);
      if(res == true) {
        x = x * 1;
      }
      else {
        x = x * 0;
      }
    }
    if (x == 1) {
      return true;
    }
    else {
      return false;
    }
  }
  public Object visit(ASTnot node, Object data) throws Exception{
    if(data == null) {
      data = -1;
    }
    if(node.jjtGetChild(0).toString().equals("not") == false) {
      Boolean res = (Boolean)node.jjtGetChild(0).jjtAccept(this,null);
      // System.out.println("data is "+(Integer)data);
      if(res == true && (Integer)data == 1) {
        // System.out.println("returning true");
        return true;
      }
      else if(res == false && (Integer)data == -1) {
        // System.out.println("returning true");
        return true;
      }
      else {
        // System.out.println("returning false");
        return false;
      }
    }
    else {
      data = (Integer)data * -1;
      return node.jjtGetChild(0).jjtAccept(this,data);
    }
    // System.out.println("there has been a mistake node is "+ node.jjtGetChild(0).toString());
    // return false;
  }
  public Object visit(ASTcomparison node, Object data) throws Exception{
    // node.jjtGetChild(1).jjtAccept(this,node);
    Boolean res = (Boolean)node.jjtGetChild(1).jjtAccept(this,node);
    // System.out.println("for "+node.jjtGetChild(0)+node.jjtGetChild(1)+node.jjtGetChild(2)+" "+node.jjtGetChild(1).jjtAccept(this,node));
    return res;
  }
  public Object visit(ASTLT node, Object data) throws Exception{
    ASTcomparison comp = (ASTcomparison) data;
    Integer one = ((Integer)comp.jjtGetChild(0).jjtAccept(this,null)).intValue();
    Integer two = ((Integer)comp.jjtGetChild(2).jjtAccept(this,null)).intValue();
    if(one < two) {
      // System.out.println("from asteq true");
      return true;
    }
    else {
      // System.out.println("from asteq false");
      return false;
    }
    // return false;
  }
  public Object visit(ASTLE node, Object data) throws Exception{
    ASTcomparison comp = (ASTcomparison) data;
    Integer one = ((Integer)comp.jjtGetChild(0).jjtAccept(this,null)).intValue();
    Integer two = ((Integer)comp.jjtGetChild(2).jjtAccept(this,null)).intValue();
    if(one <= two) {
      // System.out.println("from asteq true");
      return true;
    }
    else {
      // System.out.println("from asteq false");
      return false;
    }
    // return false;
  }
  public Object visit(ASTGT node, Object data) throws Exception{
    ASTcomparison comp = (ASTcomparison) data;
    Integer one = ((Integer)comp.jjtGetChild(0).jjtAccept(this,null)).intValue();
    Integer two = ((Integer)comp.jjtGetChild(2).jjtAccept(this,null)).intValue();
    if(one > two) {
      // System.out.println("from asteq true");
      return true;
    }
    else {
      // System.out.println("from asteq false");
      return false;
    }
    // return false;
  }
  public Object visit(ASTGE node, Object data) throws Exception{
    ASTcomparison comp = (ASTcomparison) data;
    Integer one = ((Integer)comp.jjtGetChild(0).jjtAccept(this,null)).intValue();
    Integer two = ((Integer)comp.jjtGetChild(2).jjtAccept(this,null)).intValue();
    if(one >= two) {
      // System.out.println("from asteq true");
      return true;
    }
    else {
      // System.out.println("from asteq false");
      return false;
    }
    // return false;
  }
  public Object visit(ASTEQ node, Object data) throws Exception{
    ASTcomparison comp = (ASTcomparison) data;
    if(comp.jjtGetChild(0).jjtAccept(this,null) instanceof Integer) {
      // System.out.println("Integer compare EQ");
      Integer one = ((Integer)comp.jjtGetChild(0).jjtAccept(this,null)).intValue();
      Integer two = ((Integer)comp.jjtGetChild(2).jjtAccept(this,null)).intValue();
      if(one == two) {
        // System.out.println("from asteq true");
        return true;
      }
      else {
        // System.out.println("from asteq false");
        return false;
      }
    }
    else if(comp.jjtGetChild(0).jjtAccept(this,null) instanceof String) {
      // System.out.println("String compare");
      String one = String.valueOf(comp.jjtGetChild(0).jjtAccept(this,null));
      String two = String.valueOf(comp.jjtGetChild(2).jjtAccept(this,null));
      HLString strHL = new HLString("");
      if(strHL.isSame(one,two) == true) {
        // System.out.println("from asteq true");
        return true;
      }
      else {
        // System.out.println("from asteq false");
        return false;
      }
    }
    // System.out.println("from asteq false");
    return false;
  }
  public Object visit(ASTNE node, Object data) throws Exception{
    ASTcomparison comp = (ASTcomparison) data;
    if(comp.jjtGetChild(0).jjtAccept(this,null) instanceof Integer) {
      // System.out.println("Integer compare for NE");
      Integer one = ((Integer)comp.jjtGetChild(0).jjtAccept(this,null)).intValue();
      Integer two = ((Integer)comp.jjtGetChild(2).jjtAccept(this,null)).intValue();
      if(one != two) {
        // System.out.println("from asteq true");
        return true;
      }
      else {
        // System.out.println("from asteq false");
        return false;
      }
    }
    else if(comp.jjtGetChild(0).jjtAccept(this,null) instanceof String) {
      // System.out.println("String compare");
      String one = String.valueOf(comp.jjtGetChild(0).jjtAccept(this,null));
      String two = String.valueOf(comp.jjtGetChild(2).jjtAccept(this,null));
      HLString strHL = new HLString("");
      if(strHL.isSame(one,two) == false) {
        // System.out.println("from asteq true");
        return true;
      }
      else {
        // System.out.println("from asteq false");
        return false;
      }
    }
    // System.out.println("from asteq false");
    return false;
  }
  public Object visit(ASTIN node, Object data) throws Exception{
    ASTcomparison comp = (ASTcomparison) data;
    String one = String.valueOf(comp.jjtGetChild(0).jjtAccept(this,null));
    String two = String.valueOf(comp.jjtGetChild(2).jjtAccept(this,null));
    HLString strHL = new HLString("");
    if(strHL.contains(one,two) == true) {
      // System.out.println("from asteq true");
      return true;
    }
    else {
      // System.out.println("from asteq false");
      return false;
    }
  }
  public Object visit(ASTISINT node, Object data) throws Exception{
    // System.out.println("node is :"+node.jjtGetChild(0));
    if(node.jjtGetChild(0).jjtAccept(this,null) instanceof Integer) {
      return true;
    }
    return false;
  }
  public Object visit(ASTISSTR node, Object data) throws Exception{
    // System.out.println("node is :"+node.jjtGetChild(0));
    if(node.jjtGetChild(0).jjtAccept(this,null) instanceof String) {
      return true;
    }
    return false;
  }
  public Object visit(ASTISLST node, Object data) throws Exception{
    // System.out.println("node is :"+node.jjtGetChild(0));
    if(node.jjtGetChild(0).jjtAccept(this,null) instanceof ArrayList) {
      return true;
    }
    return false;
  }
  public Object visit(ASTsum node, Object data) throws Exception{
    // System.out.println("summing: "+node.jjtGetChild(0));
    if(node.jjtGetChild(0).jjtAccept(this,null) instanceof Integer) {
      // System.out.println("Integer operation");
      int result = 0;
      for (int i=0; i<node.jjtGetNumChildren(); i++) {
        result += ((Integer) node.jjtGetChild(i).jjtAccept(this,null)).intValue();  
      } 
      return new Integer (result);
    }
    else if(node.jjtGetChild(0).jjtAccept(this,null) instanceof String) {
      // System.out.println("String operation for["+ node.jjtGetChild(0).jjtAccept(this,null)+"]this");
      String str = "";
      String temp = "";
      for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
        str = ((String.valueOf(node.jjtGetChild(i).jjtAccept(this,temp)).toString()));
        // System.out.println("string is"+str);
        temp = str;
      }
      // System.out.println("NEW STRING: "+str);
      return new String (str);
    }
    else {
      return null;
    }
  }
  public Object visit(ASTneg node, Object data) throws Exception{
    if(node.jjtGetChild(0).jjtAccept(this,null) instanceof Integer && data == null) {
      int result = -1 * ((Integer) node.jjtGetChild(0).jjtAccept(this,null)).intValue();
      return new Integer (result);
    }
    else {
      HLString strHL = new HLString((String)data);
      // String strR = ((String)node.jjtGetChild(0).jjtAccept(this,null).toString()).toString();
      String str = strHL.sub((String.valueOf(node.jjtGetChild(0).jjtAccept(this,null))));
      return new String (str);
    }
  }
  public Object visit(ASTpos node, Object data) throws Exception{
    // System.out.println("pos: "+node.jjtGetChild(0).jjtAccept(this,null));
    if(node.jjtGetChild(0).jjtAccept(this,null) instanceof Integer && data == null) {
      int result = ((Integer) node.jjtGetChild(0).jjtAccept(this,null)).intValue();
      return new Integer (result);
    }
    else {
      // System.out.println("this should be the/ one");
      String str = (String)data + ((String) node.jjtGetChild(0).jjtAccept(this,null).toString()).toString();
      // System.out.println(str+".");
      return new String (str);
    }
  }
  public Object visit(ASTmul node, Object data) throws Exception{
    if(node.jjtGetChild(0).jjtAccept(this,null) instanceof Integer) {
      int result = 1;
      for (int i=0; i<node.jjtGetNumChildren(); i++) {
        result *= ((Integer) node.jjtGetChild(i).jjtAccept(this,null)).intValue();  
      } 
      return new Integer(result);
    }
    else if(node.jjtGetChild(0).jjtAccept(this,null) instanceof String) {
      String str = "";
      String temp = "";
      for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
        if(i == 0) {
          str = ((String) node.jjtGetChild(i).jjtAccept(this,temp)).toString();
          temp = str;
        }
        else if(i == 1) {
          HLString strHL = new HLString(str);
          str = strHL.mul(String.valueOf(node.jjtGetChild(i).jjtAccept(this,null))); 
        }
      }
      return new String (str);
    }
    else {
      return null;
    }
  }
  public Object visit(ASTdiv node, Object data) throws Exception{
    int result = 1;
    for (int i=0; i<node.jjtGetNumChildren(); i++) {
      if(i == 0) {
        result = ((Integer) node.jjtGetChild(i).jjtAccept(this,null)).intValue();
      }
      else {
        result = result / ((Integer) node.jjtGetChild(i).jjtAccept(this,null)).intValue();   
      }
    }
    return new Integer(result);
    // return defaultVisit(node, data);
  }
  public Object visit(ASTmod node, Object data) throws Exception{
    if(node.jjtGetChild(0).jjtAccept(this,null) instanceof Integer) {
      int result = 1;
      for (int i=0; i<node.jjtGetNumChildren(); i++) {
        if(i == 0) {
          result = ((Integer) node.jjtGetChild(i).jjtAccept(this,null)).intValue();
        }
        else {
          result = result % ((Integer) node.jjtGetChild(i).jjtAccept(this,null)).intValue();   
        }
      }
      return new Integer(result);
    }
    else if(node.jjtGetChild(0).jjtAccept(this,null) instanceof String) {
      String str = "";
      String temp = "";
      for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
        if(i == 0) {
          str = ((String) node.jjtGetChild(i).jjtAccept(this,temp)).toString();
          temp = str;
        }
        else if(i == 1) {
          HLString strHL = new HLString(str);
          str = strHL.mod(String.valueOf(node.jjtGetChild(i).jjtAccept(this,null))); 
        }
      }
      return new String (str);
    }
    else {
      return null;
    }
  }
  public Object visit(ASTindex node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTlist node, Object data) throws Exception{
    ArrayList<Object> lst = new ArrayList<>();

    for(int i = 0; i < node.jjtGetNumChildren(); ++i) {
      lst.add(node.jjtGetChild(i).jjtAccept(this, null));
    }

    return lst;
  }
  public Object visit(ASTidentifier node, Object data) throws Exception{
    // System.out.println("identifier: "+node.jjtGetValue());
    HLSymbolTab symbolTab = new HLSymbolTab();
    // System.out.println(symbolTab.nameHashtable);
    // System.out.println(symbolTab.stackHashtable);
    // System.out.println(symbolTab.getName((Integer)node.jjtGetValue()));
    // System.out.println(symbolTab.getObject(symbolTab.getName((Integer)node.jjtGetValue())));
    ArrayDeque stack = symbolTab.getObject(symbolTab.getName((Integer)node.jjtGetValue()));
    // System.out.println("parent is :"+node.jjtGetParent()+" for "+symbolTab.getName((Integer)node.jjtGetValue()));
    // if(node.jjtGetParent().toString().equals("return_stat") == true) {
    //   System.out.println("FROM RETURN");
    // }
    if(data != null){
      // System.out.println("this is an assignment "+);
      if(node.jjtGetParent().toString().equals("sum") == true) {
        return stack.getFirst();
      }
      else if(data instanceof ASTparam_decls) {
        ASTparam_decls para = (ASTparam_decls)data;
        // System.out.println("adding parameters "+para.jjtGetNumChildren());
        // System.out.println("before adding body to stack"+stack);
        // System.out.println("para is "+para.jjtGetChild(0).jjtGetChild(1));
        symbolTab.activation.clear();
        for(int i = 0; i < para.jjtGetNumChildren(); ++i) {
          // System.out.println("FOR PARA "+para.jjtGetChild(i).jjtGetChild(1));
          ASTidentifier id = (ASTidentifier)para.jjtGetChild(i).jjtGetChild(1);
          // System.out.println("PARA VALUE IS : "+id.jjtGetValue());
          symbolTab.activation.addLast(symbolTab.getName((Integer)id.jjtGetValue()));
          // System.out.println(symbolTab.activation);
        }
        if(para.jjtGetNumChildren() > 0) {
          stack.addLast(data);
        }
        // System.out.println("before adding body to stack"+stack);
      }
      else if(data instanceof ASTbody) {
        // System.out.println("adding body");
        // System.out.println("before adding body to stack"+stack);
        stack.addLast(data);
        // System.out.println("before adding body to stack"+stack);
      }
      else if(data instanceof String) {
        // System.out.println("FN_CALL");
        // System.out.println("Executing body");
        // System.out.println(stack);
        if(data.toString().equals("fn_call")) {
          if(stack.getFirst().toString().equals("body") == false) {
            stack.removeFirst();
          }
          ASTbody body = (ASTbody)stack.getFirst();
          return body.jjtAccept(this,null);
        }
        else {
          if(stack.isEmpty() == false) {
            stack.removeFirst();
          }
          System.out.println("data: "+data);
          stack.addFirst(data);
        }
        return null;
      }
      else {
        if(stack.isEmpty() == false) {
          stack.removeFirst();
        }
        // System.out.println("data that is a string: "+data+" from "+node.jjtGetParent());
        stack.addFirst(data);
      }
      return null;
    }
    else {
      // System.out.println("hello from the otherside");
      if(stack.isEmpty() == true) {
        // System.out.println("it's empty");
        return null;
      }
      else if(stack.getFirst() instanceof ASTparam_decls) {
        ASTparam_decls para = (ASTparam_decls)stack.getFirst();
        // System.out.println("Executing parameters");
        if(stack.getFirst().toString().equals("body") == false) {
          // System.out.println("Before executing para: "+stack);
          stack.removeFirst();
          // System.out.println("After executing para: "+stack);
          para.jjtAccept(this,symbolTab.getName((Integer)node.jjtGetValue()));
        }
        return null;
      }
      else{
        // System.out.println("cock returning: "+stack.getFirst());
        return stack.getFirst();
      }
    }
  }
  public Object visit(ASTinteger node, Object data) throws Exception{
    return node.jjtGetValue();
  }
  public Object visit(ASTstring node, Object data) throws Exception{
    String str = (String)node.jjtGetValue().toString();
    return str;
  }
}
/* JavaCC - OriginalChecksum=7a873f858427b61f926ef9acaf91a5dc (do not edit this line) */
