/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. HL.jj */
/*@egen*///===================================================================================================
//
//  HL.jjt copyright Sophie Quigley 2022
//
//  The copyright to this original work is held by Sophie Quigley, and students registered in course 
//  CPS710 taught at Toronto Metropolitan University in the Fall semester of 2022 can use this material 
//  for the purposes of this course, but no other use is permitted and there can be no sale or transfer 
//  or use of the work for any other purpose without the explicit permission of Sophie Quigley.
//  In particular, no part of this file and can be posted in code repositories, or transmitted to
//  students not registered in CPS710 in the Fall semester of 2022.
//
//===================================================================================================
options {
  IGNORE_CASE=true;
             	                                                                        
                                                                                            
               	                                                                  
                                  // This will create the exception infrastructure used for function calls
}

PARSER_BEGIN(HL)

public class HL/*@bgen(jjtree)*/implements HLTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTHLState jjtree = new JJTHLState();

/*@egen*/
}

PARSER_END(HL)

TOKEN_MGR_DECLS : 
{
}

SKIP : {
  " "     
  | "\t"    
  | "\n"    
  | "\r"    
  }

TOKEN : 
{
	< EQ:	"=">
|	< GE:	">=">
|	< GT:	">">
|	< LE:	"<=">
|	< LT:	"<">
| < NE: "!=">
| < ADD:	"+">
|	< SUB:	"-">
|	< PROD:	"*">
|	< DIV:	"/">
|	< MOD:	"%">
|	< LPAREN:	"(">
|	< LSQUARE:	"[">
|	< RPAREN:	")">
|	< RSQUARE:	"]">
|	< ASSIGN:	":=">
| < AND:	"&">
| < OR:	"|">
| < NOT:	"!">
|	< COMMA:	",">
|	< SEMICOL:	";">
|	< COL:	":">
|	< DOT:	".">
}
TOKEN : 
{
  < ANY:"ANY">
|	< DO:"DO">
|	< ELIF:"ELIF">
|	< ELSE:"ELSE">
|	< FI:"FI">
|	< FOR:"FOR">
|	< FUN:"FUN">
|	< IF:"IF">
| < IN:"IN">
| < INT:"INT">
| < LST:"LST">
|	< NUF:"NUF">
|	< OD:"OD">
|	< PRINT:"PRINT">
|	< PRINTLN:"PRINTLN">
|	< RETURN:"RETURN">
|	< STR:"STR">
| < THEN:"THEN">
|	< WHILE:"WHILE">
| < ISINT:"ISINT">
| < ISSTR:"ISSTR">
| < ISLST:"ISLST">
}
 
TOKEN : 
{
	< #DIGIT:	["0"-"9"]>
|	< #LETTER:	["a"-"z","A"-"Z"]>
|	< INTEGER:	(<DIGIT>)+ >
|	< IDENTIFIER:	<LETTER>(<LETTER>|<DIGIT>)* >
| < STRING: "\"" (~["\""])* "\"" >
}

// ----------------------  COMMENTS     ----------------------------

SPECIAL_TOKEN : {
        <COMMENT_SINGLE: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    }

//==============================================================================================
//                                     P A R S E R
//==============================================================================================

// ------------------------------- BEGINNING -----------------------------------

SimpleNode start	()        :
{}
{  S()  { return (SimpleNode) (jjtree.popNode()); }
| < EOF > {throw new ParseException("End of File.");}
}

void S() throws ParseException	     		 :
{}
{	statement_LL1() ";"
| LOOKAHEAD(<IDENTIFIER> (indexed())* ":=") assignment() ";"
| expression() ";"
}

//------------------------    STATEMENTS, BODIES AND CLAUSES -----------------------------------

void statement_LL1()       : 
{}
{	declaration()
| if_stat()
| for_stat()
| while_stat()	
| print_stat()
| println_stat()
| return_stat()
}

void statement()       :
{}
{	statement_LL1()
| LOOKAHEAD(2) fn_call()
| assignment()
}

void body()			 :
{/*@bgen(jjtree) body */
  ASTbody jjtn000 = new ASTbody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) body */
        try {
/*@egen*/	(statement() ";")*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void clause()		 :
{/*@bgen(jjtree) clause */
  ASTclause jjtn000 = new ASTclause(JJTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) clause */
        try {
/*@egen*/	(statement() ";")+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//---------------------------   DECLARATIONS ------------------------------------------------

void declaration()      	 :
{}
{	type() (simple_decl() | fn_decl())
}

void type()	     		 :
{}
{/*@bgen(jjtree) ANY */
        {
          ASTANY jjtn001 = new ASTANY(JJTANY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	<ANY>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/      
|/*@bgen(jjtree) INT */
  {
    ASTINT jjtn002 = new ASTINT(JJTINT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ <INT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/      
|/*@bgen(jjtree) STR */
  {
    ASTSTR jjtn003 = new ASTSTR(JJTSTR);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ <STR>/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/      
|/*@bgen(jjtree) LST */
  {
    ASTLST jjtn004 = new ASTLST(JJTLST);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ <LST>/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/      
}

void simple_decl()       :
{}
{/*@bgen(jjtree) #simple_decl( jjtree . nodeArity ( ) + 1) */
        {
          ASTsimple_decl jjtn001 = new ASTsimple_decl(JJTSIMPLE_DECL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	(identifier() ("," identifier())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) + 1);
          }
        }
/*@egen*/                                   
}

void fn_decl()      		 :
{}
{/*@bgen(jjtree) #fn_decl( 4) */
        {
          ASTfn_decl jjtn001 = new ASTfn_decl(JJTFN_DECL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	(<FUN> identifier() "(" (param_decls()) ")" body() <NUF>)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  4);
          }
        }
/*@egen*/            
}

void param_decls() :
{/*@bgen(jjtree) param_decls */
  ASTparam_decls jjtn000 = new ASTparam_decls(JJTPARAM_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param_decls */
        try {
/*@egen*/	param_decl() ("," param_decl())*
|/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void param_decl()		 :
{/*@bgen(jjtree) param_decl */
  ASTparam_decl jjtn000 = new ASTparam_decl(JJTPARAM_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param_decl */
        try {
/*@egen*/	type() identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//---------------------------   IF AND LOOP STATEMENTS  ----------------------------------


void if_stat() :
{/*@bgen(jjtree) if_stat */
  ASTif_stat jjtn000 = new ASTif_stat(JJTIF_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) if_stat */
        try {
/*@egen*/	<IF> condition() <THEN> clause() else_clause() <FI>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void else_clause	()      :
{}
{/*@bgen(jjtree) if_stat */
         {
           ASTif_stat jjtn001 = new ASTif_stat(JJTIF_STAT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/	 (<ELIF> condition() <THEN> clause() else_clause())/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/         
|  <ELSE> clause()
|/*@bgen(jjtree) NULL */
   {
     ASTNULL jjtn002 = new ASTNULL(JJTNULL);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*//*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn002, true);
     jjtc002 = false;
   }
/*@egen*/  {}/*@bgen(jjtree)*/
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/      
}

void for_stat()		 :
{/*@bgen(jjtree) for_stat */
  ASTfor_stat jjtn000 = new ASTfor_stat(JJTFOR_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) for_stat */
        try {
/*@egen*/	<FOR> identifier() <IN> expression() <DO> body() <OD>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void while_stat()		 :
{/*@bgen(jjtree) while_stat */
  ASTwhile_stat jjtn000 = new ASTwhile_stat(JJTWHILE_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) while_stat */
        try {
/*@egen*/	<WHILE> condition() <DO> body() <OD>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//---------------------------    ASSIGNMENTS AND FUNCTION CALLS ----------------------------

void assignment() :
{/*@bgen(jjtree) assignment */
  ASTassignment jjtn000 = new ASTassignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignment */
   try {
/*@egen*/  identifier() indexes() ":=" expression()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void fn_call()		 :
{/*@bgen(jjtree) fn_call */
  ASTfn_call jjtn000 = new ASTfn_call(JJTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fn_call */
        try {
/*@egen*/	identifier() "(" (parameters()) ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void parameters()	 :
{/*@bgen(jjtree) parameters */
  ASTparameters jjtn000 = new ASTparameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameters */
        try {
/*@egen*/	expression() ("," expression())*
|/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/  {}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//---------------------------   OTHER STATEMENTS   -------------------------------------------


void print_stat()		 :
{/*@bgen(jjtree) print_stat */
  ASTprint_stat jjtn000 = new ASTprint_stat(JJTPRINT_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) print_stat */
        try {
/*@egen*/	<PRINT> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void println_stat()	 :
{/*@bgen(jjtree) println_stat */
  ASTprintln_stat jjtn000 = new ASTprintln_stat(JJTPRINTLN_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) println_stat */
        try {
/*@egen*/	<PRINTLN> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void return_stat()	 :
{/*@bgen(jjtree) return_stat */
  ASTreturn_stat jjtn000 = new ASTreturn_stat(JJTRETURN_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) return_stat */
        try {
/*@egen*/	<RETURN> return_value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void return_value()	      :
{}
{	expression()
|/*@bgen(jjtree) NULL */
  {
    ASTNULL jjtn001 = new ASTNULL(JJTNULL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/      
}

//---------------------------   CONDITIONS ---------------------------------------------------

void condition()      :
{}
{/*@bgen(jjtree) #or(> 1) */
        {
          ASTor jjtn001 = new ASTor(JJTOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	(and_clause() (<"|"> and_clause())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/        
}

void and_clause()      :
{}
{/*@bgen(jjtree) #and(> 1) */
        {
          ASTand jjtn001 = new ASTand(JJTAND);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	(not_clause() (<"&"> not_clause())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/         
}

void not_clause()	     	 :
{}
{/*@bgen(jjtree) not */
        {
          ASTnot jjtn001 = new ASTnot(JJTNOT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	("!" not_clause())/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/     
| <ISINT>/*@bgen(jjtree) ISINT */
          {
            ASTISINT jjtn002 = new ASTISINT(JJTISINT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ expression()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/       
| <ISSTR>/*@bgen(jjtree) ISSTR */
          {
            ASTISSTR jjtn003 = new ASTISSTR(JJTISSTR);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ expression()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
/*@egen*/       
| <ISLST>/*@bgen(jjtree) ISLST */
          {
            ASTISLST jjtn004 = new ASTISLST(JJTISLST);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
          }
          try {
/*@egen*/ expression()/*@bgen(jjtree)*/
          } catch (Throwable jjte004) {
            if (jjtc004) {
              jjtree.clearNodeScope(jjtn004);
              jjtc004 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte004 instanceof RuntimeException) {
              throw (RuntimeException)jjte004;
            }
            if (jjte004 instanceof ParseException) {
              throw (ParseException)jjte004;
            }
            throw (Error)jjte004;
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
            }
          }
/*@egen*/       
|	LOOKAHEAD(expression() comparator()) comparison() 
| "(" condition() ")"
}

void comparison()		 :
{/*@bgen(jjtree) comparison */
  ASTcomparison jjtn000 = new ASTcomparison(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) comparison */
        try {
/*@egen*/	expression() comparator() expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void comparator()	      :
{}
{/*@bgen(jjtree) LT */
        {
          ASTLT jjtn001 = new ASTLT(JJTLT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	<LT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       
|/*@bgen(jjtree) LE */
  {
    ASTLE jjtn002 = new ASTLE(JJTLE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ <LE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/     
|/*@bgen(jjtree) GT */
  {
    ASTGT jjtn003 = new ASTGT(JJTGT);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ <GT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/      
|/*@bgen(jjtree) GE */
  {
    ASTGE jjtn004 = new ASTGE(JJTGE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ <GE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/      
|/*@bgen(jjtree) EQ */
  {
    ASTEQ jjtn005 = new ASTEQ(JJTEQ);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/ <EQ>/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/      
|/*@bgen(jjtree) NE */
  {
    ASTNE jjtn006 = new ASTNE(JJTNE);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/ <NE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
  }
/*@egen*/     
|/*@bgen(jjtree) IN */
  {
    ASTIN jjtn007 = new ASTIN(JJTIN);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
  }
  try {
/*@egen*/ <IN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
  }
/*@egen*/      
}

//---------------------------   EXPRESSIONS ------------------------------------------------

void expression()	     	 :
{}
{/*@bgen(jjtree) #sum(> 1) */
        {
          ASTsum jjtn001 = new ASTsum(JJTSUM);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	("+" product() (summand())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/         
|/*@bgen(jjtree) sum */
        {
          ASTsum jjtn002 = new ASTsum(JJTSUM);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/	(neg() (summand())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/     
|/*@bgen(jjtree) #sum(> 1) */
        {
          ASTsum jjtn003 = new ASTsum(JJTSUM);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/	(product() (summand())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            throw (RuntimeException)jjte003;
          }
          if (jjte003 instanceof ParseException) {
            throw (ParseException)jjte003;
          }
          throw (Error)jjte003;
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/          
}

void neg() :
{/*@bgen(jjtree) neg */
  ASTneg jjtn000 = new ASTneg(JJTNEG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) neg */
        try {
/*@egen*/	"-" product()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

 void summand()       :
{}
{	"+"/*@bgen(jjtree) pos */
            {
              ASTpos jjtn001 = new ASTpos(JJTPOS);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ product()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/     
|	"-"/*@bgen(jjtree) neg */
            {
              ASTneg jjtn002 = new ASTneg(JJTNEG);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ product()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
              }
            }
/*@egen*/     
}
 
void product()       :
{}
{	term() moreterms()
}

void moreterms()       :
{}
{/*@bgen(jjtree) #mul( 2) */
 {
   ASTmul jjtn001 = new ASTmul(JJTMUL);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/("*" term())/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  2);
   }
 }
/*@egen*/         moreterms()
|/*@bgen(jjtree) #div( 2) */
 {
   ASTdiv jjtn002 = new ASTdiv(JJTDIV);
   boolean jjtc002 = true;
   jjtree.openNodeScope(jjtn002);
 }
 try {
/*@egen*/("/" term())/*@bgen(jjtree)*/
 } catch (Throwable jjte002) {
   if (jjtc002) {
     jjtree.clearNodeScope(jjtn002);
     jjtc002 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte002 instanceof RuntimeException) {
     throw (RuntimeException)jjte002;
   }
   if (jjte002 instanceof ParseException) {
     throw (ParseException)jjte002;
   }
   throw (Error)jjte002;
 } finally {
   if (jjtc002) {
     jjtree.closeNodeScope(jjtn002,  2);
   }
 }
/*@egen*/         moreterms()
|/*@bgen(jjtree) #mod( 2) */
 {
   ASTmod jjtn003 = new ASTmod(JJTMOD);
   boolean jjtc003 = true;
   jjtree.openNodeScope(jjtn003);
 }
 try {
/*@egen*/("%" term())/*@bgen(jjtree)*/
 } catch (Throwable jjte003) {
   if (jjtc003) {
     jjtree.clearNodeScope(jjtn003);
     jjtc003 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte003 instanceof RuntimeException) {
     throw (RuntimeException)jjte003;
   }
   if (jjte003 instanceof ParseException) {
     throw (ParseException)jjte003;
   }
   throw (Error)jjte003;
 } finally {
   if (jjtc003) {
     jjtree.closeNodeScope(jjtn003,  2);
   }
 }
/*@egen*/         moreterms()
| {}
}

void term	()       :
{}
{	unindexed_term() indexes()
}

void unindexed_term()       :
{}
{	"(" expression() ")"
|	LOOKAHEAD(2) fn_call()
|	simple_term()
}

void indexes()       :
{}
{ indexed() indexes()
| {}
}

void indexed()       :
{}
{/*@bgen(jjtree) #index( 3) */
        {
          ASTindex jjtn001 = new ASTindex(JJTINDEX);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	("." unindexed_term() to_index())/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  3);
          }
        }
/*@egen*/          
}

void to_index()	      :
{}
{	":" unindexed_term()
|/*@bgen(jjtree) NULL */
  {
    ASTNULL jjtn001 = new ASTNULL(JJTNULL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/      
}

void simple_term()       :
{}
{	identifier()
| integer()
| string()
| list()
}

void list()	      :
{}
{	"["  (list_elements()) "]"
}

void list_elements()       :
{}
{/*@bgen(jjtree) list */
        {
          ASTlist jjtn001 = new ASTlist(JJTLIST);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	(expression() ("," expression())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/      
|/*@bgen(jjtree) list */
  {
    ASTlist jjtn002 = new ASTlist(JJTLIST);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/      
}

void identifier () :
{/*@bgen(jjtree) identifier */
 ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) identifier */
   try {
/*@egen*/  t=<IDENTIFIER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/  {jjtn000.jjtSetValue(t.getValue());}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void integer () :
{/*@bgen(jjtree) integer */
 ASTinteger jjtn000 = new ASTinteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) integer */
   try {
/*@egen*/  t=<INTEGER>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/  {jjtn000.jjtSetValue(t.getValue());}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void string () :
{/*@bgen(jjtree) string */
 ASTstring jjtn000 = new ASTstring(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) string */
   try {
/*@egen*/  t=<STRING>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/  {jjtn000.jjtSetValue(t.getValue());}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
